{"version":3,"sources":["components/DireitosReservados.js","components/LoginUsuario.js","components/ListaDeUsuarios.js","App.js","serviceWorker.js","index.js"],"names":["LinhaCopyrigth","className","this","props","textoDoRodape","React","Component","LoginUsuario","state","valorCurtir","nameValue","emailValue","onClickCurtir","setState","onClickDescurtir","onChangeNome","event","target","value","onChangeEmail","onClickBotaoCadastrar","body","name","email","console","log","axios","post","headers","Authorization","then","response","window","alert","catch","error","valorContador","placeholder","onChange","onClick","href","List","styled","div","NomeEBt","ListaDeUsuarios","usersList","getUsersList","get","data","onClickDeleteUser","userId","delete","map","user","id","App","currentPage","onClickChangePage","nextPage","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.02eb3a32.chunk.js","sourcesContent":["import React from 'react';\n\nexport class LinhaCopyrigth extends React.Component{\n    render(){\n        return(\n            <>\n                <div className={'div-rodape'}>\n                    <p className={'rodape'}>{this.props.textoDoRodape}</p>\n                </div>\n            </>\n        )\n    }\n}\n  \n\n//elemento neto (filho do LoginUsuario.js que é filho do App.js)","import React from 'react';\n\nimport { LinhaCopyrigth } from './DireitosReservados';\nimport axios from 'axios';\n\nexport class LoginUsuario extends React.Component{\n    state = {\n        valorCurtir: '',\n        nameValue: '',\n        emailValue:'',\n        \n\n    }\n          \n    onClickCurtir = () => {        \n        const curtiu = 'Obrigado'\n        this.setState({valorCurtir: curtiu})            \n    }\n    onClickDescurtir = () => {        \n        const curtiu = ''\n        this.setState({valorCurtir: curtiu})            \n    }\n    onChangeNome = event => {\n        this.setState({nameValue: event.target.value})\n    }\n    onChangeEmail = event => {\n        this.setState({emailValue: event.target.value})\n    }   \n\n    onClickBotaoCadastrar = () =>{\n        const body = {\n            name: this.state.nameValue,\n            email: this.state.emailValue\n        }\n        console.log(\"clicou em cadastrar\")\n\n        axios.post('https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users', body, {\n            headers: {\n                Authorization: 'isaac-martiniano-julian'\n            }    \n        }\n        )\n        .then(response => {\n            window.alert('Usuário Criado com Sucesso!')\n        })\n        .catch(error => {\n            console.log(error.response)\n            window.alert('ERRO ao Criar o Usuario :(')\n        })\n\n        this.setState({nameValue: '', emailValue: ''})\n    }  \n\n    render(){\n        console.log(this.state.valorContador)\n        return (\n            <>               \n                <div className={'caixa-de-login'}>\n                    <h2>Novo Cadastro</h2>\n                    <p>Nome:</p>\n                    <input placeholder={'Nome'} value={this.state.nameValue} onChange={this.onChangeNome}></input>\n                    <p>Email:</p>\n                    <input placeholder={'Email'} value={this.state.emailValue} onChange={this.onChangeEmail}></input>\n                    <p onClick={this.onClickBotaoCadastrar}><a className=\"bt-cadastrar\" href=\"#\">Cadastrar</a></p>                    \n                </div>\n                <div className={'area-curtir'}>\n                    <p>{this.state.valorCurtir}</p>\n                    <button onClick={this.onClickCurtir}>Curtir</button>\n                    <button onClick={this.onClickDescurtir}>Descurtir</button>\n                </div>               \n                <LinhaCopyrigth textoDoRodape={'TODOS OS DIREITOS RESERVADOS'}/>               \n            </>\n        )    \n    }\n}\n\n//elemento filho","import React from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\n\nconst List = styled.div`\n  text-align: center;\n  width: 300px;\n  margin:auto;\n  margin-top: 70px;\n  border: 3px solid royalblue;\n  padding-bottom: 20px;\n  background-color: sandybrown;\n`\nconst NomeEBt = styled.div`\n    align-items: center;\n`\nexport class ListaDeUsuarios extends React.Component{\n    state = {\n        usersList:[]\n    }\n\n    componentDidMount(){\n        this.getUsersList()\n    }\n\n    getUsersList = () => {\n        axios.get('https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users',{\n            headers: {\n                Authorization: 'isaac-martiniano-julian'\n            }\n        }).then((response) => {\n            console.log(response.data)\n            this.setState({usersList: response.data})\n        }).catch((error) => {\n            console.log(error.response)\n        })\n    }\n\n    onClickDeleteUser = (userId) => {       \n        axios.delete(`https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users/${userId}`,{\n            headers: {\n                Authorization: 'isaac-martiniano-julian'\n            }    \n        }).then((response) => {\n            window.alert('Usuário Deletado com Sucesso')\n            this.getUsersList()\n        }).catch((error) => {\n            window.alert('Deu Error :(')\n        })\n    } \n    render(){\n        return(\n            <>\n                <List>\n                    <h1>Lista de Usuarios</h1>\n                    <div>{this.state.usersList.map(user =>{\n                        return (\n                            <NomeEBt>\n                                <p>{user.name}<button onClick={() => this.onClickDeleteUser(user.id)}>Apagar</button></p>\n                                \n                            </NomeEBt>    \n                        )\n                    })\n                    }\n                    </div>\n                </List>\n            </>\n        )\n    }\n}\n  ","import React from 'react';\n\nimport './App.css';\nimport { LoginUsuario } from './components/LoginUsuario';\nimport { ListaDeUsuarios } from './components/ListaDeUsuarios';\nclass App extends React.Component{\n  state = {\n    currentPage: \"FORM\"\n  }\n  onClickChangePage = () => {\n    const nextPage = this.state.currentPage === 'FORM' ? 'LIST' : 'FORM'\n    this.setState({ currentPage: nextPage })\n  }\n  render(){\n  \n  return (\n    <div>\n      <button className={'botao-para-lista'} onClick={this.onClickChangePage}>{this.state.currentPage ==='FORM' ? 'Ir Para Lista' : 'Voltar Para Formulário'}</button>\n      <div >\n        {this.state.currentPage === 'FORM' ? (\n        <LoginUsuario /> \n        ) : ( \n        <ListaDeUsuarios />\n        )}\n        \n       \n      </div>\n    </div>\n  );\n  }  \n}\n\nexport default App\n//elemento pai","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}